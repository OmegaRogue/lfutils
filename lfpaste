#!/bin/sh
# an alternative paste command for lf.
# it uses rsync for copying,
# sends the copy progress to lf,
# disables the q key until the copy is done,
# and adds a cancel-copy command that kills the rsync process.

# config
list=~/.local/share/lf/files
rsync_opts='-ab --inplace'

# check if lf's id is provided
[ -z "$1" ] && exit 1
id=$1
shift

# check if the given id is a number
[ $id -eq $id ] || exit 1

# if custom rsync options are provided,
# override the defaults with them.
[ -n "$*" ] && rsync_opts="$*"

main()
{
    [ -r $list ] || exit 1
    mode=$(head -n1 $list)

    case $mode in
        move) move ;;
        copy) copy ;;
    esac

    [ $? -ne 0 ] && return

    rm $list
    lfreload -f $id
    send clear
}

# start the copy, prepare the cancel-copy command
copy()
{
    [ -z "$fn" ] && fn=rsyncfn
    [ -z "$pgrep_ptrn" ] && pgrep_ptrn='^rsync.*info'

    send "map q echo $mode in progress"
    $fn &
    sleep 0.1
    send "cmd cancel-copy &kill $(pgrep -f --newest "$pgrep_ptrn") && ( (sleep 1; lf -remote 'send $id echo $mode canceled.') & ); lfreload -f $id"
    wait
    send 'map q quit'
    send "cmd cancel-copy echo no copy or move in progress"
}

rsyncfn() {
    command -v rsync || exit 1
    x rsync $rsync_opts --info=progress2 -- | send_percentage &&
        touch "$rsync_success"
}

# change variables and run the copy() function
# depending on the filesystem of source and destination files.
move()
{
    if is_src_dest_fs_same; then
        fn=mvfn
        pgrep_ptrn='^mv -b'
        copy
    else
        rsync_opts="$rsync_opts --remove-source-files"
        copy
        [ -e "$rsync_success" ] &&
            rm -f "$rsync_success" &&
            remove_empty_dirs_in_srcs
    fi
}

mvfn() {
    x mv -b --
}

# if even one of the files that need to be moved, is
# on the same filesystem that the destination is in,
# we gotta use the mv command for moving. otherwise, we use rsync.
is_src_dest_fs_same()
{
    destfs=$(stat -c%d .)
    sed 1d $list | while IFS= read -r src; do
        [ "$(stat -c%d "$src")" -eq "$destfs" ] && echo equal
    done | grep -qm1 'equal' && return 0
    return 1
}

# for moving files, rsync has a 'remove-source-files' option,
# but it leaves empty dirs behind and only removes the files.
# so this function removes the empty dirs.
remove_empty_dirs_in_srcs()
{
    sed 1d $list | while IFS= read -r src; do
        find "$src" -type d -empty -delete
    done
}

# get copy percentage from the output of rsync
# and echo it in lf.
send_percentage()
{
    stdbuf -i0 -o0 -e0 \
        tr '\r' '\n' |
        while IFS= read -r info; do
            percent="[$(echo "$info" | awk '{print $2}')]"
            lf -remote "send $id echo $percent"
        done
}

# set the given programs's arguments to
# files that need to be copied, and the destination.
x() {
    ( sed 1d $list; echo . ) | xargs -d'\n' "$@"
}

# send commands to lf.
send() {
    lf -remote "send $id $*"
}

rsync_success="${XDG_RUNTIME_DIR:-/tmp}/rsync_success"
trap "rm -f '$rsync_success'" EXIT

main "$@"
exit
